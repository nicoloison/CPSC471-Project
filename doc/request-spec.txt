-- URL query parameters and JSON responses --

* Conventions *

In the following examples, user-supplied input is denoted by <angle brackets>.
Optional input is denoted by [square brackets], and optionally repeated input
is denoted by [ellipses...].

As is standard in URL queries, the beginning of a parameter list is denoted
by a question mark (?), and individual query parameters are separated by
ampersands (&). Parameters may be in the form of simple <attributes>, or
may be in the form of <attribute>=<value> pairs.

For example, in the 'search cookbooks by attribute' URL

    http://www.recipeserver.com/cookbooks/list?<attribute>=<value>[&<attribute>=<value>...]

the URL of the script itself is given by http://www.recipeserver.com/cookbooks/list,
the beginning of the parameter list is denoted by a question mark (?),
the first <attribute> and <value> are user-supplied and necessary,
and as many repeated <attribute>=<value> pairs as desired may be supplied
    afterwards, separated by ampersands (&).

The temporary server URL http://www.recipeserver.com/ is used until we can come
up with something nicer ;)

* HTTP requests *

Responses shall be obtained from the server via HTTP requests to the specified
URLs with the specified parameters.

Most requests shall be made via an HTTP GET request with a header in the
following format:

   GET /<path>/<script> HTTP/1.1
   host: http://www.recipeserver.com/

Creation requests for cookbooks and recipes shall be made via an HTTP POST
request with a header in the following format:

   POST /<path>/create HTTP/1.1
   content-type: application/x-www-form-urlencoded
   host: http://www.recipeserver.com/
   content-length: <parameter length>

   <parameter=value>
   [&parameter=value]
   ...

Since the creation requests require potentially long data such as descriptions
to be sent, it's not possible to use a GET request with query parameters (many
browsers are limited to slightly over 2000 characters in a URL).

Additional lines may be specified in the header if it simplifies the
implementation. However, the lines mentioned above must be present in all
requests.

* HTML encoding *

All parameters in both GET and POST requests must be encoded to escape all
HTML entities therein, to avoid confusing URL and request parsing. This
encoding shall be performed by the standard libraries for the language,
such as HttpServerUtility.HtmlEncode() in C#, or htmlentites() in PHP.

* JSON encoding *

All results returned by the server will be in JSON format. For requests
which return rows from a table, each row will be returned as a separate
JSON object (collection of key-value pairs), separated by a single newline
(\n). JSON objects are represented by braces ({/}) surrounding lists of
comma-separated "name":"value" pairs.

ex:
   {"user":"lmitchell","password":"12345678"}

For requests which only require a success/failure response (eg. creating
a recipe, rating a recipe), the server shall respond with the JSON object

   {"result":"<success/failure>","error":"<error message>"}

In the successful case, the "error" field's value will contain an empy string.

JSON objects shall be escaped as per the escaping rules followed by PHP's
json_encode() function, and can be decoded into PHP associative arrays via
the json_decode() function, or C#'s Json.Decode().

USE CASE: User login
URL:
JSON:

* cookbooks/ *

Cookbook-related scripts will be accessed via the cookbooks/ subdirectory on the
server. The scripts contained in cookbooks/ will be:

-- script ------------- purpose

cookbooks/search        Search the database for cookbooks, with optional criteria
                        to specify certain attributes. cookbooks/search will also
                        allow the optional parameter show_only=<number> and
                        sort_by=<attribute_name> to allow sorting of the output
                        and restriction of requests on the database. sort_by will
                        by default return attributes sorted in descending order -
                        to specify ascending order instead, specify the attribute
                        as -<attribute_name> (ie. with a leading negative sign).

cookbooks/create        Create a new cookbook with specified criteria in POST
                        request.

cookbooks/add           Add a recipe to a cookbook.

cookbooks/remove        Remove a recipe from a cookbook.

cookbooks/show-recipes  List all of the recipes in a specified cookbook.

cookbooks/rate          Rate a specified cookbook.

USE CASE: Show all cookbooks
URL: http://www.recipeserver.com/cookbooks/search
JSON:

USE CASE: Search cookbooks by attribute
URL: http://www.recipeserver.com/cookbooks/search?<attribute>=<value>[&<attribute>=<value>...]
JSON:

USE CASE: Show all of a user's cookbooks
URL: http://www.recipeserver.com/cookbooks/search?author_name=<username>
JSON:

USE CASE: Show top 10 cookbooks by rating
URL: http://www.recipeserver.com/cookbooks/seach?show_only=10&sort_by

USE CASE: Create cookbook
URL: http://www.recipeserver.com/cookbooks/create
POST REQUEST:

   POST /cookbooks/create HTTP/1.1
   content-type: application/x-www-form-urlencoded
   host: http://www.recipeserver.com/
   content-length: <parameter length>

   author_name=<username>
   &cookbook_name=<cookbook_name>
   &cookbook_description=<description>

JSON:

USE CASE: Add recipe to cookbook
URL: http://www.recipeserver.com/cookbooks/add?cookbook_name=<cookbook_name>&cookbook_author=<cookbook_author_name>&recipe_name=<recipe_name>&recipe_author=<recipe_author_name>
JSON:

USE CASE: Remove recipe from cookbook
URL: http://www.recipeserver.com/cookbooks/remove?cookbook_name=<cookbook_name>&cookbook_author=<cookbook_author_name>&recipe_name=<recipe_name>&recipe_author=<recipe_author_name>
JSON:

USE CASE: Show all recipes in a cookbook
URL: http://www.recipeserver.com/cookbooks/show-recipes?name=<name>&author=<username>
JSON:

USE CASE: Rate a cookbook
URL: http://www.recipeserver.com/cookbooks/rate?username=<username>&author_name=<author_name>&cookbook_name=<cookbook_name>&rating=<0..5>

* recipes/ *

Recipe-related scripts will be accessed via the recipes/ subdirectory on the
server. The scripts contained in recipes/ will be:

-- script ------------- purpose

recipes/search          Search the database for recipes, with optional criteria
                        to specify certain attributes. recipes/search will also
                        support the show_only=<number> and sort_by=<attribute>
                        options (see cookbooks/search above). In addition, it
                        will support the options using=<ingredient> and
                        using_only=<ingredient>. Both may be specified multiple
                        times, and the final list will be used to filter recipes
                        down to those which use (or only use) the specified
                        ingredients.

recipes/create          Create a recipe with the specified parameters.

recipes/delete          Remove a recipe from the database and all associated
                        cookbooks.

recipes/rate            Rate a specified recipe.


USE CASE: Show all recipes
URL: http://www.recipeserver.com/recipes/search
JSON:

USE CASE: Show all of a user's recipes
URL: http://www.recipeserver.com/recipes/search?author_name=<username>
JSON:

USE CASE: Search recipes by attribute
URL: http://www.recipeserver.com/recipes/search?<attribute>=<value>[&<attribute>=<value>...]
JSON:

USE CASE: Show top rated recipes
URL: http://www.recipeserver.com/recipes/search?sort_by=rating
JSON:

USE CASE: Show recipes using certain ingredients
URL: http://www.recipeserver.com/recipes/search?using=<ingredient>[&using=<ingredient>...]
JSON:

USE CASE: Show recipes using ONLY certain ingredients
URL: http://www.recipeserver.com/recipes/search?using_only=<ingredient>[&using_only=<ingredient>...]
JSON:

USE CASE: Create recipe
URL: http://www.recipeserver.com/recipes/create
POST REQUEST:

   POST /recipes/create HTTP/1.1
   content-type: application/x-www-form-urlencoded
   host: http://www.recipeserver.com/
   content-length: <parameter length>

   recipe_name=<recipe_name>
   &author_name=<author_name>
   &instructions=<instructions>
   &picture=</path/to/picture>
   &prep_time=<prep_time>
   &portions=<portions>
   &description=<description>

JSON:

USE CASE: Rate recipe
URL: http://www.recipeserver.com/recipes/rate?username=<username>&recipe_name=<recipe_name>&author_name=<author_name>&rating=<0..5>
JSON:
